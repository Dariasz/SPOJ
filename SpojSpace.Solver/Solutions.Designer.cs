//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SpojSpace.Solver {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Solutions {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Solutions() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SpojSpace.Solver.Solutions", typeof(Solutions).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///using System.Diagnostics;
        ///using System.Linq;
        ///
        ///// http://www.spoj.com/problems/ABCDEF/ #ad-hoc #combinatorics #hash-table #math
        ///// Counts all sextuples satisfying the equation (a * b + c) / d - e = f.
        ///public static class ABCDEF
        ///{
        ///    // Naively we can generates all sextuples and test each. Generating them
        ///    // is simple because repetitions are allowed (and nums are already distinct).
        ///    public static long SolveSlowly(int[] nums)
        ///    {
        ///        lo [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ABCDEF {
            get {
                return ResourceManager.GetString("ABCDEF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/ABSYS/ #ad-hoc #strings
        ///// Takes an equation with an inkblot over one number, and removes the blot.
        ///public static class ABSYS
        ///{
        ///    // For whatever reason the inkblot is represented by the string &quot;machula&quot;.
        ///    private const string _inkblot = &quot;machula&quot;;
        ///
        ///    // For an equation of the form &apos;number + number = number&apos;, just identify
        ///    // over what number the blot exists and solve for it using algebra.
        ///    public static string Solve(string line)
        ///    { [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ABSYS {
            get {
                return ResourceManager.GetString("ABSYS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///
        ///// http://www.spoj.com/problems/ACODE/ #dynamic-programming #memoization #recursion
        ///// Returns the number of ways to decode a number (string of digits) representing characters in alphabetical position.
        ///public static class ACODE
        ///{
        ///    // For example, 1 decodes into A, 10 decodes into J, and 15 decodes into AE and O.
        ///    private static readonly IReadOnlyDictionary&lt;string, long&gt; _codedLetterDecodeCounts = new Dictionary&lt;string, long&gt;
        ///    {
        ///        { &quot;1 [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ACODE_v1 {
            get {
                return ResourceManager.GetString("ACODE_v1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/ACODE/ #dynamic-programming-1d
        ///// Returns the number of ways to decode a number (string of digits) representing characters in alphabetical position.
        ///public static class ACODE
        ///{
        ///    // Array that&apos;s built dynamically, containing at index i the decode count for the first i digits
        ///    // of the given number. The number is guaranteed to have no more than 5000 digits.
        ///    private static long[] _decodeCounts = new long[5001];
        ///
        ///    public static long Solve(st [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ACODE_v2 {
            get {
                return ResourceManager.GetString("ACODE_v2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Linq;
        ///
        ///// http://www.spoj.com/problems/ACPC10A/ #sequence
        ///// Given three successive numbers in a sequence, returns the type of sequence and the next number.
        ///public static class ACPC10A
        ///{
        ///    public static string Solve(int first, int second, int third)
        ///    {
        ///        if (IsArithmeticSequence(first, second, third))
        ///            return $&quot;AP {third + (third - second)}&quot;;
        ///
        ///        return $&quot;GP {third * (third / second)}&quot;;
        ///    }
        ///
        ///    public static bool IsArithmeticSequence(pa [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ACPC10A {
            get {
                return ResourceManager.GetString("ACPC10A", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Text;
        ///
        ///// http://www.spoj.com/problems/ACPC10D/ #dynamic-programming-2d #path-optimization
        ///// Finds the shortest path between top and bottom middle vertices in a &apos;tri graph.&apos;
        ///public static class ACPC10D
        ///{
        ///    // Really similar to BYTESM2. Need to be a little careful to consider all moves,
        ///    // not just downward and diagonal, since vertices can have negative values. And we start
        ///    // at the top middle, so can&apos;t let impossible moves from the top left impact results.
        ///   [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ACPC10D {
            get {
                return ResourceManager.GetString("ACPC10D", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Text;
        ///
        ///// http://www.spoj.com/problems/ACPC11B/ #binary-search #merge #sorting
        ///// Finds the closest pair of altitudes, one from each of two mountains.
        ///public static class ACPC11B
        ///{
        ///    // Knowing where an altitude on one mountain goes relative to the sort of the other mountain&apos;s
        ///    // altitudes effectively tells us the closest altitudes (the ones to its left and right).
        ///    // One option is to sort both and then perform a merge basically, but it&apos;s only necessary
        ///    //  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ACPC11B {
            get {
                return ResourceManager.GetString("ACPC11B", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/ADDREV/ #ad-hoc #digits
        ///// Returns the reversed sum of two reversed integers.
        ///public static class ADDREV
        ///{
        ///    public static int Solve(int a, int b)
        ///        =&gt; (a.Reverse() + b.Reverse()).Reverse();
        ///
        ///    private static int Reverse(this int a)
        ///    {
        ///        int reverse = 0;
        ///        while (a != 0)
        ///        {
        ///            reverse = reverse * 10 + a % 10; // Make room for the next digit, and then add it.
        ///            a = a / 10; // Remove the digit just [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ADDREV {
            get {
                return ResourceManager.GetString("ADDREV", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/AE00/ #division #experiment #math
        ///// Counts the number of rectangles that can be constructed from n 1x1 squares (using any number of those squares), 1 &lt;= n &lt;= 10000.
        ///// More info here: http://mathschallenge.net/library/number/number_of_divisors, https://en.wikipedia.org/wiki/Divisor_function
        ///public static class AE00
        ///{
        ///    public static int Solve(int n)
        ///    {
        ///        // Rectangles from n squares can use any number of squares, that is, n squares can make [rest of string was truncated]&quot;;.
        /// </summary>
        public static string AE00 {
            get {
                return ResourceManager.GetString("AE00", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///
        ///// http://www.spoj.com/problems/AGGRCOW/ #binary-search #greedy #optimization #research
        ///// Places some cows in stalls in a way that maximizes: the shortest distance between any two cows.
        ///public static class AGGRCOW
        ///{
        ///    // Given a potential shortest distance between stalls, it&apos;s easy to verify if the cows can be placed
        ///    // with at least that much distance between any two of them. To do this:
        ///    // Put a cow in the first stall, put the next cow i [rest of string was truncated]&quot;;.
        /// </summary>
        public static string AGGRCOW {
            get {
                return ResourceManager.GetString("AGGRCOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/AIBOHP/ #dynamic-programming-2d #optimization
        ///// Finds the minimum number of character insertions needed to turn a string into a palindrome.
        ///public static class AIBOHP
        ///{
        ///    private static int[,] minimumInsertionCounts = new int[6100, 6100];
        ///
        ///    // If the string starts and ends in the same characters, the insertion count is whatever
        ///    // the count is for the substring excluding those two characters. It wouldn&apos;t make sense
        ///    // to add characters b [rest of string was truncated]&quot;;.
        /// </summary>
        public static string AIBOHP {
            get {
                return ResourceManager.GetString("AIBOHP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Text;
        ///
        ///// http://www.spoj.com/problems/ALICESIE/ #division #experiment #sieve
        ///// Finds how many numbers remaining after sieving like Alice.
        ///public static class ALICESIE
        ///{
        ///    // Just look at four different examples to understand what&apos;s happening:
        ///    // 13 12 11 10 9 8 7 6 5 4 3 2
        ///    //                   X X X X X
        ///    // 10 9 8 7 6 5 4 3 2
        ///    //            X X X X
        ///    // 5 4 3 2
        ///    //       X
        ///    // 3 2
        ///    //
        ///    // The numbers that get crossed out are those th [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ALICESIE {
            get {
                return ResourceManager.GetString("ALICESIE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/AMR10G/ #extrema #sorting
        ///// Finds a set of K students from N total having the minimum height difference between tallest and shortest.
        ///public static class AMR10G
        ///{
        ///    // There are potentially many subsets of size costumeCount, but it doesn&apos;t make sense
        ///    // to consider all of them. Ignoring non-distinct heights (because it won&apos;t matter), every
        ///    // set of size costumeCount has a tallest student. There must be at least costumeCount - 1
        ///    // stude [rest of string was truncated]&quot;;.
        /// </summary>
        public static string AMR10G {
            get {
                return ResourceManager.GetString("AMR10G", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/AMR12D/ #inspection #intuition #strings #trap
        ///// Determines if the reverse of every substring exists in a string.
        ///public static class AMR12D
        ///{
        ///    // One substring is the entire string. For the reverse of the entire string
        ///    // to be in the string, the reverse would need to be the same as the string,
        ///    // since the string is the only substring long enough to match the reversed string.
        ///    // But given it&apos;s a palindrome, the reverse of all other sub [rest of string was truncated]&quot;;.
        /// </summary>
        public static string AMR12D {
            get {
                return ResourceManager.GetString("AMR12D", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///
        ///// http://www.spoj.com/problems/ANARC05B/ #intersection #sequence #sorting
        ///// Maximizes the sum while traversing a pair of intersecting, ordered sequences.
        ///public static class ANARC05B
        ///{
        ///    // Sequences are effectively one-indexed as the first element is the sequence size.
        ///    // And they&apos;re strictly increasing. And there&apos;s no cost for jumping between sequences,
        ///    // so we can just do this greedily. The sequence to use from each intersection point [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ANARC05B {
            get {
                return ResourceManager.GetString("ANARC05B", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///
        ///// http://www.spoj.com/problems/ANARC09A/ #dynamic-programming-x #greedy #recursion #stack
        ///// Finds the minimum number of replacements needed to balance a string of brackets.
        ///public static class ANARC09A
        ///{
        ///    public static int Solve(string s)
        ///        =&gt; SolveUsingAStack(s);
        ///
        ///    // This relies on a greedy strategy (I gave up and read the comments). Immediately when a } is found,
        ///    // pair it off with a { if one exists (by removing that { from th [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ANARC09A {
            get {
                return ResourceManager.GetString("ANARC09A", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/AP2/ #experiment #math #sequence
        ///// Given the third term, third-to-last term, and sum of an arithmetic progression, finds the whole series.
        ///public static class AP2
        ///{
        ///    public static long[] Solve(long thirdTerm, long thirdToLastTerm, long sum)
        ///    {
        ///        // In an AP, note that pairs like (a_1, a_n), (a_2, a_n-1) always add up to the same thing.
        ///        // A little more work shows (a_b + a_n-b) * (n/2) = sum, so n = 2 * sum / (a_b + a_n-b).
        ///        [rest of string was truncated]&quot;;.
        /// </summary>
        public static string AP2 {
            get {
                return ResourceManager.GetString("AP2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///
        ///// http://www.spoj.com/problems/ARITH2/ #ad-hoc #parsing #strings
        ///// Parses a math expression and computes the result as if it were streamed in, ignoring precedence.
        ///public static class ARITH2
        ///{
        ///    public static long Solve(string expression)
        ///    {
        ///        string[] spacelessSubexpressions = expression.Split(default(char[]), StringSplitOptions.RemoveEmptyEntries);
        ///        string[] tokens = spacelessSubexpressions
        ///            .Sel [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ARITH2 {
            get {
                return ResourceManager.GetString("ARITH2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Linq;
        ///
        ///// http://www.spoj.com/problems/ARMY/ #ad-hoc
        ///// Figures out if the army of Godzilla or the army of MechaGodzilla wins the war.
        ///public static class ARMY
        ///{
        ///    // Each battle a random weakest unit dies, cross-army ties lost by MechaGodzilla&apos;s army.
        ///    // The battles continue until one army is depleted. In effect, the victor is determined
        ///    // by the strongest unit in each army, a tie going Godzilla&apos;s way.
        ///    public static string Solve(int[] strengthsOfGodzillas [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ARMY {
            get {
                return ResourceManager.GetString("ARMY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///
        ///// http://www.spoj.com/problems/ARRAYSUB/ #deque #extrema #window
        ///// Finds the maximum for all contiguous subarrays of a given size in an array.
        ///public static class ARRAYSUB
        ///{
        ///    // Looks like I ended up with the typical sliding-window deque solution. Here&apos;s an example for k = 3:
        ///    // 1 3 2 8 4 7 2, initialize left looking dominators like {3, 2}. These dominate everything to their
        ///    // left until a bigger dominator. Leftmost  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ARRAYSUB {
            get {
                return ResourceManager.GetString("ARRAYSUB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/BEENUMS/ #formula #math #proof
        ///// Determines if the given number is a beehive number.
        ///public static class BEENUMS
        ///{
        ///    // See image for details: http://i.imgur.com/ELtDEAU.jpg.
        ///    // That shows that for &quot;number&quot; to be a beehive number, it must equal 3(n - 1)n + 1 for some integer n,
        ///    // called the index. The quadratic equation lets us solve for the positive n index given &quot;number&quot;, and then
        ///    // we just need to verify it&apos;s actually an integer. Th [rest of string was truncated]&quot;;.
        /// </summary>
        public static string BEENUMS {
            get {
                return ResourceManager.GetString("BEENUMS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Numerics;
        ///
        ///// http://www.spoj.com/problems/BISHOPS/ #ad-hoc #experiment #math
        ///// Finds the maximum number of bishops that can be (safely) placed on a given-size chessboard.
        ///public static class BISHOPS
        ///{
        ///    // I didn&apos;t prove optimality but it&apos;s easy to show at least 2n - 2 bishops is always
        ///    // possible by placing n along the top and n - 2 along the base (none in the corners).
        ///    // Might be easy to show 2n isn&apos;t possible.
        ///    public static BigInteger Solve(BigIntege [rest of string was truncated]&quot;;.
        /// </summary>
        public static string BISHOPS {
            get {
                return ResourceManager.GetString("BISHOPS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///using System.Text;
        ///
        ///// http://www.spoj.com/problems/BITMAP/ #bfs-multi-source #experiment
        ///// For all black and white pixels in a grid, finds the distance to the closest white pixel.
        ///public static class BITMAP
        ///{
        ///    // White pixels are within zero of a white pixel. All black pixels adjacent to a white pixel
        ///    // are within 1. All black pixels adjacent to those black pixels are within 2 (unless we already
        ///    // know they&apos;re within 1). Easy to visual [rest of string was truncated]&quot;;.
        /// </summary>
        public static string BITMAP {
            get {
                return ResourceManager.GetString("BITMAP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///
        ///// http://www.spoj.com/problems/BUGLIFE/ #dfs #graph-theory
        ///// Determines if a set of bugs can be divided into two non-interacting groups.
        ///public static class BUGLIFE
        ///{
        ///    // Best we can do is see if the ants can be divided into two groups, where members
        ///    // of one group only interact with members of the other group. Same as checking bipartiteness.
        ///    // Not the actual code submi [rest of string was truncated]&quot;;.
        /// </summary>
        public static string BUGLIFE {
            get {
                return ResourceManager.GetString("BUGLIFE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Text;
        ///
        ///// http://www.spoj.com/problems/BUSYMAN/ #greedy #sorting
        ///// Finds the maximum number of activities that can fit into a schedule.
        ///public static class BUSYMAN
        ///{
        ///    public static int Solve(int a, int b)
        ///        =&gt; a * b;
        ///}
        ///
        ///public static class Program
        ///{
        ///    private static void Main()
        ///    {
        ///        var output = new StringBuilder();
        ///        int remainingTestCases = int.Parse(Console.ReadLine());
        ///        while (remainingTestCases-- &gt; 0)
        ///        {
        ///             [rest of string was truncated]&quot;;.
        /// </summary>
        public static string BUSYMAN {
            get {
                return ResourceManager.GetString("BUSYMAN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Linq;
        ///
        ///// http://www.spoj.com/problems/BYECAKES/ #division #experiment #optimization #trap
        ///// Finds the minimal amount of cake ingredients to buy to use all of them completely up.
        ///public static class BYECAKES
        ///{
        ///    // Find the greatest number of cakes needed to deplete any one of the starting ingredients.
        ///    // This is the total number of cakes to bake, buying (across each ingredient) any missing
        ///    // ingredients necessary to support that number of cakes. Pretty clear  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string BYECAKES {
            get {
                return ResourceManager.GetString("BYECAKES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///
        ///// http://www.spoj.com/problems/BYTESM2/ #dynamic-programming-2d #path-optimization
        ///// Finds the (downward) path of most stones in a grid of stones.
        ///public static class BYTESM2
        ///{
        ///    // The value of the best path to a square is the square&apos;s value plus the max
        ///    // of the values of the best paths of the squares in the previous row it&apos;s reachable from.
        ///    public static int Solve(int height, int width, int[,] stones)
        ///    {
        ///        // We could use t [rest of string was truncated]&quot;;.
        /// </summary>
        public static string BYTESM2 {
            get {
                return ResourceManager.GetString("BYTESM2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Linq;
        ///
        ///// http://www.spoj.com/problems/CANDY/ #ad-hoc #division
        ///// Given packets containing different numbers of candies, count the fewest moves needed to split them up fairly, if possible.
        ///public static class CANDY
        ///{
        ///    public static int Solve(int[] packetCandyCounts)
        ///    {
        ///        int packetCount = packetCandyCounts.Length;
        ///        int totalCandies = packetCandyCounts.Sum();
        ///
        ///        if (totalCandies % packetCount != 0)
        ///            return -1; // Splitting the candi [rest of string was truncated]&quot;;.
        /// </summary>
        public static string CANDY {
            get {
                return ResourceManager.GetString("CANDY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/CANDY3/ #division #mod-math #trap
        ///// Determines if N bags full of candies can have their contents redistributed equally amongst N children.
        ///public static class CANDY3
        ///{
        ///    // I guess the numbers will be too big if summed directly, so need to use property of modular arithmetic:
        ///    // (a + b) mod m == (a mod m + b mod m) mod m
        ///    public static bool Solve(ulong[] backpackCandyCounts)
        ///    {
        ///        uint N = (uint)backpackCandyCounts.Length;
        ///        ul [rest of string was truncated]&quot;;.
        /// </summary>
        public static string CANDY3 {
            get {
                return ResourceManager.GetString("CANDY3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/CANTON/ #ad-hoc #math #sequence
        ///// Finds the nth term in Cantor&apos;s enumeration of the rational numbers.
        ///public static class CANTON
        ///{
        ///    public static Tuple&lt;int, int&gt; Solve(int n)
        ///    {
        ///        // The enumeration progresses along diagonals of the rectangle. The first diagonal has
        ///        // one term, the second two, the third three, and so on. Hence, the total number of terms
        ///        // in the first d diagonals is 1 + 2 + ... + d = (d + 1)d/2. The nth  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string CANTON {
            get {
                return ResourceManager.GetString("CANTON", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///
        ///// http://www.spoj.com/problems/COINS/ #dynamic-programming-1d #recursion
        ///// Figures out if it&apos;s better to exchange a coin of value n directly for USD at a 1:1 rate,
        ///// or split the coins up as Byteland banks allow (n/2, n/3, n/4 coins and then recursively on those...).
        ///public static class COINS
        ///{
        ///    private const int _cachedLimit = 15258; // 1 billion / 2^16
        ///
        ///    // Cache some of the first 500 million values necessary to do this without recursive  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string COINS {
            get {
                return ResourceManager.GetString("COINS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///
        ///// http://www.spoj.com/problems/COMDIV/ #division #factors #io #math #primes #sieve
        ///// Finds the number of common divisors shared by two numbers.
        ///// See COMDIV.cpp--this solution was submitted using C++ because C# I/O is too slow.
        ///public static class COMDIV
        ///{
        ///    private const int _limit = 1000000;
        ///    private static readonly TrialDivisionFactorizer _factorizer;
        ///
        ///    static COMDIV()
        ///    {
        ///        _factorizer = new TrialDivisio [rest of string was truncated]&quot;;.
        /// </summary>
        public static string COMDIV {
            get {
                return ResourceManager.GetString("COMDIV", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Text;
        ///
        ///// http://www.spoj.com/problems/CPRMT/ #ad-hoc #buckets #strings
        ///// From two strings finds the longest string with some permutation being a subsequence of both.
        ///public static class CPRMT
        ///{
        ///    // Note the subsequence doesn&apos;t have to be contiguous. Since we can take any permutation of
        ///    // the string, the string from all common characters between the two strings is the
        ///    // best possible. Each string has all the characters, so in whatever order they appear
        ///     [rest of string was truncated]&quot;;.
        /// </summary>
        public static string CPRMT {
            get {
                return ResourceManager.GetString("CPRMT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/CRDS/ #inspection #sequence
        ///// Counts cards in a typical card pyramid, modulo 1000007.
        ///public static class CRDS
        ///{
        ///    public static int Solve(int n)
        ///    {
        ///        long m = n;
        ///
        ///        // There are m - 1 floors with card counts 1, 2, ... m - 1, for:
        ///        long cardsFromFloors = m * (m - 1) / 2;
        ///
        ///        // There are m levels with card counts of 2, 4, ..., 2m, for (cancelling the 2s):
        ///        long cardsFromWalls = (m + 1) * m;
        ///
        ///        return (i [rest of string was truncated]&quot;;.
        /// </summary>
        public static string CRDS {
            get {
                return ResourceManager.GetString("CRDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///
        ///// http://www.spoj.com/problems/CSTREET/ #graph-theory #greedy #heap #mst #research
        ///// Finds the cheapest way to pave streets from any building to any building.
        ///public static class CSTREET
        ///{
        ///    // This uses Prim&apos;s algorithm: &quot;https://en.wikipedia.org/wiki/Prim&apos;s_algorithm. We don&apos;t actually need
        ///    // to build the MST, just get the total cost of the streets that compose it. The heap itself can be
        ///    // used  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string CSTREET {
            get {
                return ResourceManager.GetString("CSTREET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/DANGER/ #experiment #formula #game #math
        ///// Finds the last survivor for n people in a circle, where every second person dies.
        ///public static class DANGER
        ///{
        ///    // 1
        ///    // 
        ///    // 1 2
        ///    // 1
        ///    // 
        ///    // 1 2 3
        ///    // 1   3
        ///    //     3
        ///    // 
        ///    // 1 2 3 4
        ///    // 1   3
        ///    // 1
        ///    // And so on, like:
        ///    // n: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17...
        ///    // s: 1 1 3 1 3 5 7 1 3 5  7  9  11 13 15 1  3...
        ///    // For a proof that thi [rest of string was truncated]&quot;;.
        /// </summary>
        public static string DANGER {
            get {
                return ResourceManager.GetString("DANGER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///
        ///// http://www.spoj.com/problems/DIEHARD/ #experiment #game #memoization
        ///// Finds how long we can survive while moving between fire, water, and air.
        ///public static class DIEHARD
        ///{
        ///    private const int _airHealthDelta = 3;
        ///    private const int _airArmorDelta = 2;
        ///    private const int _waterHealthDelta = -5;
        ///    private const int _waterArmorDelta = -10;
        ///    private const int _fireHealthDelta = -20;
        ///    private const int _fireArmorDelta = 5;
        ///
        ///     [rest of string was truncated]&quot;;.
        /// </summary>
        public static string DIEHARD {
            get {
                return ResourceManager.GetString("DIEHARD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Text;
        ///
        ///// http://www.spoj.com/problems/DISUBSTR/ #sorting #strings #suffixes
        ///// Counts the number of distinct substrings in a string.
        ///public static class DISUBSTR
        ///{
        ///    // This uses the well-known concept of a suffix array. The string we&apos;re given is pretty short and there
        ///    // aren&apos;t many test cases, so it&apos;s fine to create the sorted suffix start indices in O(nWlogn). I don&apos;t
        ///    // actually create the substrings though. We don&apos;t need to create the LCP array, but the sa [rest of string was truncated]&quot;;.
        /// </summary>
        public static string DISUBSTR {
            get {
                return ResourceManager.GetString("DISUBSTR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/DOTAA/ #ad-hoc #division #game #io
        ///// Figures out if the heroes can make it past the towers without anyone dying.
        ///public static class DOTAA
        ///{
        ///    // All towers do the same damage. Each hero can tank a certain amount of
        ///    // tower hits before dying. We can calculate how many survivable hits for
        ///    // each individual hero as they are read, then compare that total to the tower
        ///    // count to see if it&apos;s possible for all heroes to survive.
        ///    public  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string DOTAA {
            get {
                return ResourceManager.GetString("DOTAA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///
        ///// http://www.spoj.com/problems/DQUERY/ #bit #offline #research #sorting
        ///// Finds the number of distinct elements in a subrange of an array.
        ///// See DQUERY.cpp--this solution was submitted using C++ because C# is too slow. Benchmarking a 200k/30k case shows
        ///// it&apos;s almost as good as the C++ solution on my local machine, and within the time limits of the problem, so oh well.
        ///public static class DQUERY
        ///{
        ///    // Ne [rest of string was truncated]&quot;;.
        /// </summary>
        public static string DQUERY {
            get {
                return ResourceManager.GetString("DQUERY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/EASYPROB/ #binary #experiment #recursion
        ///// Transforms a number into its base 2 representation in a weird recursive way.
        ///public static class EASYPROB
        ///{
        ///    public static string Solve(int n)
        ///        =&gt; $&quot;{n}={SolveRecursively(n)}&quot;;
        ///
        ///    // Say n = 137. The binary representation of n is 10001001, or in other words:
        ///    // 2^7 + 2^3 + 2^0, but those exponents get defined recursively using the same procedure:
        ///    // 2^(2^2 + 2 + 2^0) + 2^(2 + 2^0) + 2^0, [rest of string was truncated]&quot;;.
        /// </summary>
        public static string EASYPROB {
            get {
                return ResourceManager.GetString("EASYPROB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/EDIST/ #dynamic-programming-2d #research #strings
        ///// Finds the minimum number of edits (inserts, deletes, replacements) to make two strings equal.
        ///public static class EDIST
        ///{
        ///    // This is just solved in the standard way using the Wagner-Fischer algorithm.
        ///    // Note that proceeds from the perspective of transforming a into b rather than
        ///    // transforming a and b into a common third string c as this problem permits.
        ///    // Sufficient though, as ass [rest of string was truncated]&quot;;.
        /// </summary>
        public static string EDIST {
            get {
                return ResourceManager.GetString("EDIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/EGYPIZZA/ #ad-hoc #division
        ///// Orders pizza for people who need 1/4, 1/2, or 3/4 size slices (all from the same pie, single slices).
        ///public static class EGYPIZZA
        ///{
        ///    public static int Solve(int quarterSliceCount, int halfSliceCount, int threeQuarterSliceCount)
        ///    {
        ///        // One whole pizza for the host.
        ///        int pizzaCount = 1;
        ///
        ///        // Every 3/4 slice demands a whole pizza, but can be paired off with a 1/4 slice.
        ///        pizzaCount += th [rest of string was truncated]&quot;;.
        /// </summary>
        public static string EGYPIZZA {
            get {
                return ResourceManager.GetString("EGYPIZZA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///
        ///// http://www.spoj.com/problems/EIGHTS/ #digits #math
        ///// Finds the kth cube that ends in 888 (the first such cube is 192).
        ///public static class EIGHTS
        ///{
        ///    // Only part that affects the last three digits of a multiplied number are the last three
        ///    // digits of the numbers being multipled. These are all the three digit numbers whose
        ///    // cubes end in 888. Any other, higher numbers whose cubes end in 888 must themselves
        ///    // end in one of these  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string EIGHTS {
            get {
                return ResourceManager.GetString("EIGHTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Text;
        ///
        ///// http://www.spoj.com/problems/ENIGMATH/ #gcd #math #research
        ///// Solves Ax - By = 0 with x and y the smallest possible positive integers.
        ///public static class ENIGMATH
        ///{
        ///    // Ax = By =&gt; y = (A/B)x. A and B might not be in lowest terms, but we can divide each by
        ///    // their GCD so that they are. So assume they are in lowest terms, A&apos;, B&apos;. y must be an
        ///    // integer, so x has to be a multiple of B&apos; to make (A&apos;/B&apos;)x an integer (since B&apos; has
        ///    // no factors in c [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ENIGMATH {
            get {
                return ResourceManager.GetString("ENIGMATH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///
        ///// http://www.spoj.com/problems/ETF/ #formula #math #primes #research #sieve
        ///// Calculates the value of the totient function (count of relative primes) for the given n, 1 &lt;= n &lt;= 10^6.
        ///public static class ETF
        ///{
        ///    private const int _limit = 1000000;
        ///    private static readonly SieveOfEratosthenesFactorizer _factorizer;
        ///
        ///    static ETF()
        ///    {
        ///        _factorizer = new SieveOfEratosthenesFactorizer(_limit);        /// [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ETF {
            get {
                return ResourceManager.GetString("ETF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///
        ///// http://www.spoj.com/problems/FACEFRND/ #ad-hoc #hash-table #network
        ///// Finds friends of someone&apos;s friends given their friends and their friends&apos; friends.
        ///public static class FACEFRND
        ///{
        ///    public static int SolveWithHashSets(int friendCount, int[][] friendDefinitions)
        ///    {
        ///        var friends = new HashSet&lt;int&gt;();
        ///        for (int f = 0; f &lt; friendCount; ++f)
        ///        {
        ///            friends.Add(friendDefinitions[f][0]);
        ///     [rest of string was truncated]&quot;;.
        /// </summary>
        public static string FACEFRND {
            get {
                return ResourceManager.GetString("FACEFRND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/FARIDA/ #dynamic-programming-1d
        ///// Takes the most coins from a series of monsters, where it&apos;s not possible to take from adjacent monsters.
        ///public static class FARIDA
        ///{
        ///    private static long[] _maxCoinsCollectable = new long[10000];
        ///
        ///    // The max coins collected through the first k monsters is max of: the coin count for the kth monster
        ///    // plus the solution through k - 2 monsters (so the (k - 1)th monster definitely isn&apos;t chosen),
        ///    // and the [rest of string was truncated]&quot;;.
        /// </summary>
        public static string FARIDA {
            get {
                return ResourceManager.GetString("FARIDA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Linq;
        ///
        ///// http://www.spoj.com/problems/FASHION/ #ad-hoc #experiment #sorting #trap
        ///// Given parallel arrays of hotness levels, calculate the sum of the values of the hotness bonds.
        ///public static class FASHION
        ///{
        ///    // Problem statement leads one to believe these arrays are already in parallel;
        ///    // each pair already chosen. That&apos;s not the case, so it&apos;s necessary to figure out the
        ///    // pairings that produces the maximum sum of hotness bonds. Sorting and pairing the hig [rest of string was truncated]&quot;;.
        /// </summary>
        public static string FASHION {
            get {
                return ResourceManager.GetString("FASHION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/FAVDICE/ #experiment #math #probability #proof #research
        ///// Finds the expected number of rolls before rolling every side of an n-sided die.
        ///public static class FAVDICE
        ///{
        ///    // See image for details: http://i.imgur.com/O1rtLnX.jpg.
        ///    public static double Solve(int n)
        ///    {
        ///        double expectedRolls = 0;
        ///        for (int i = 0; i &lt;= n - 1; ++i)
        ///        {
        ///            expectedRolls += n / (double)(n - i);
        ///        }
        ///
        ///        return expectedRolls [rest of string was truncated]&quot;;.
        /// </summary>
        public static string FAVDICE {
            get {
                return ResourceManager.GetString("FAVDICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Text;
        ///
        ///// http://www.spoj.com/problems/FCTRL/ #experiment #factorial #factors #inspection #math #trap
        ///// Returns the number of trailing zeros of n!, for very large n.
        ///public static class FCTRL
        ///{
        ///    // n! has as many zeros as it has factors of 10. n! has as many factors of 10 as it has
        ///    // min(factors of 2, factors of 5). Looking at some numbers, it&apos;s clear n! is picking up
        ///    // factors of 2 a lot faster than factors of 5. So we need to find the number of factors
        ///   [rest of string was truncated]&quot;;.
        /// </summary>
        public static string FCTRL {
            get {
                return ResourceManager.GetString("FCTRL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///
        ///// http://www.spoj.com/problems/FCTRL2/ #big-numbers #factorial
        ///// Returns n! for 1 &lt;= n &lt;= 100 (and I think you can just use System.Numerics for this now).
        ///public static class FCTRL2
        ///{
        ///    private const int _limit = 100;
        ///    private static readonly IReadOnlyList&lt;BigInteger&gt; _factorials;
        ///
        ///    static FCTRL2()
        ///    {
        ///        var factorials = new BigInteger[_limit + 1];
        ///        factorials[0] = BigInteger.One;
        ///
        ///        for (int i [rest of string was truncated]&quot;;.
        /// </summary>
        public static string FCTRL2 {
            get {
                return ResourceManager.GetString("FCTRL2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/FENCE1/ #intuition #math
        ///// Calculates how much area can be fenced in using a specified length of fence connected to a big wall.
        ///public static class FENCE1
        ///{
        ///    // So the answer here is to make a half circle with the fence, the wall forming the straight side.
        ///    // Not sure how to prove it but it makes sense intuitively; convex, uses a lot of the free wall.
        ///    // For the whole circle, C/2 = pi*r = length =&gt; r = length/pi, =&gt; A/2 = pi * r^2 / 2 = leng [rest of string was truncated]&quot;;.
        /// </summary>
        public static string FENCE1 {
            get {
                return ResourceManager.GetString("FENCE1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///using System.Text;
        ///
        ///// http://www.spoj.com/problems/FIBOSUM/ #formula #math #memoization #mod-math #research #sequence
        ///// Finds the sum of the fibonacci numbers in a range.
        ///public static class FIBOSUM
        ///{
        ///    private const int _mod = 1000000007;
        ///    private const int _precomputedLimit = 1000;
        ///    private static readonly IReadOnlyList&lt;int&gt; _precomputedFibNums;
        ///    private static readonly Dictionary&lt;int, int&gt; _fibNumMemoizer = new Dictionary&lt;int, int&gt;() [rest of string was truncated]&quot;;.
        /// </summary>
        public static string FIBOSUM {
            get {
                return ResourceManager.GetString("FIBOSUM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Numerics;
        ///
        ///// http://www.spoj.com/problems/GCD2/ #gcd #math #research #trap
        ///// Finds the GCD of two numbers, one of which can be really big.
        ///public static class GCD2
        ///{
        ///    public static int Solve(int a, int b)
        ///        =&gt; GreatestCommonDivisor(a, b);
        ///
        ///    // This is a good article (first section): http://www.cut-the-knot.org/blue/Euclid.shtml.
        ///    // One point to note, for a = bt + r, the gcd(a, b) divides a so it divides bt + r.
        ///    // And it divides b, so it divides b [rest of string was truncated]&quot;;.
        /// </summary>
        public static string GCD2 {
            get {
                return ResourceManager.GetString("GCD2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/GIRLSNBS/ #division #experiment
        ///// Minimizes the maximum consecutive genders for some girls and boys sitting in a row.
        ///public static class GIRLSNBS
        ///{
        ///    public static int Solve(int girlCount, int boyCount)
        ///    {
        ///        int maxCount = Math.Max(girlCount, boyCount);
        ///        int minCount = Math.Min(girlCount, boyCount);
        ///
        ///        // This happens to work for the case where both are equal (including both zero).
        ///        // For normal cases where maxCount [rest of string was truncated]&quot;;.
        /// </summary>
        public static string GIRLSNBS {
            get {
                return ResourceManager.GetString("GIRLSNBS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/GLJIVE/ #ad-hoc #binary #sequence #sets #trap
        ///// Finds the contiguous subsequence starting from 1 that most closely adds to 100.
        ///public static class GLJIVE
        ///{
        ///    // Actually, the work below is wrong. We&apos;re looking for a contiguous subsequence starting
        ///    // from the first index, but not necessarily spanning all 10.
        ///    public static int SolveCorrectly(int[] points)
        ///    {
        ///        int result = 0;
        ///
        ///        for (int i = 0; i &lt; 10; ++i)
        ///        {
        ///     [rest of string was truncated]&quot;;.
        /// </summary>
        public static string GLJIVE {
            get {
                return ResourceManager.GetString("GLJIVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///using System.Text;
        ///
        ///// http://www.spoj.com/problems/GSS1/ #divide-and-conquer #research #segment-tree
        ///// Does maximum sum subrange queries on an array (using a segment tree).
        ///public sealed class GSS1
        ///{
        ///    private readonly ArrayBasedSegmentTree _segmentTree;
        ///
        ///    public GSS1(IReadOnlyList&lt;int&gt; sourceArray)
        ///    {
        ///        _segmentTree = new ArrayBasedSegmentTree(sourceArray);
        ///    }
        ///
        ///    public int Query(int queryStartIndex, int queryEndIndex)
        ///    [rest of string was truncated]&quot;;.
        /// </summary>
        public static string GSS1 {
            get {
                return ResourceManager.GetString("GSS1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///using System.Text;
        ///
        ///// http://www.spoj.com/problems/GSS3/ #divide-and-conquer #research #segment-tree
        ///// Does element updates and maximum sum subrange queries on an array (using a segment tree).
        ///public sealed class GSS3
        ///{
        ///    private readonly ArrayBasedSegmentTree _segmentTree;
        ///
        ///    public GSS3(IReadOnlyList&lt;int&gt; sourceArray)
        ///    {
        ///        _segmentTree = new ArrayBasedSegmentTree(sourceArray);
        ///    }
        ///
        ///    public int Query(int queryStartIndex, int [rest of string was truncated]&quot;;.
        /// </summary>
        public static string GSS3 {
            get {
                return ResourceManager.GetString("GSS3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to http://www.spoj.com/problems/GUESSING/ #experiment
        ///Didn&apos;t use binary search, doesn&apos;t seem to be a limit on # of guesses allowed.
        ///And didn&apos;t use second clue (B) either, just first (A) which tells how many are in correct position.
        ///.
        /// </summary>
        public static string GUESSING {
            get {
                return ResourceManager.GetString("GUESSING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///
        ///// http://www.spoj.com/problems/HANGOVER/ #binary-search #sequence
        ///// Finds the number of cards necessary to achieve a given overhang value (less than 5.2).
        ///public static class HANGOVER
        ///{
        ///    private const float _overhangLimit = 5.2f;
        ///
        ///    // Took a look at the data and it seems like float&apos;s precision won&apos;t be a problem here (at least for the first 277 terms).
        ///    private static readonly List&lt;float&gt; _runningOverhangTotals;
        ///
        ///    static HANGOVER()
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        public static string HANGOVER {
            get {
                return ResourceManager.GetString("HANGOVER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///using System.Text;
        ///
        ///// http://www.spoj.com/problems/HISTOGRA/ #ad-hoc #experiment #optimization #stack #window
        ///// Finds the largest rectangle (by area) in a histogram (rectangles w/ a common base).
        ///public static class HISTOGRA
        ///{
        ///    // I looked at times after debating (but not implementing) divide and conquer and O(n^2) approaches, and
        ///    // figured there must be an O(n) solution. Not sure if I got lucky thinking of a solution, I could imagine
        ///    / [rest of string was truncated]&quot;;.
        /// </summary>
        public static string HISTOGRA {
            get {
                return ResourceManager.GetString("HISTOGRA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Text;
        ///
        ///// http://www.spoj.com/problems/HORRIBLE/ #divide-and-conquer #lazy #research #segment-tree
        ///// Answers range sum queries and performs range additions.
        ///public sealed class HORRIBLE // v1, using a segment tree
        ///{
        ///    private readonly LazySumSegmentTree _segmentTree;
        ///
        ///    public HORRIBLE(int arrayLength)
        ///    {
        ///        _segmentTree = new LazySumSegmentTree(arrayLength);
        ///    }
        ///
        ///    public void Update(int updateStartIndex, int updateEndIndex, int rangeAddition)
        ///     [rest of string was truncated]&quot;;.
        /// </summary>
        public static string HORRIBLE_v1 {
            get {
                return ResourceManager.GetString("HORRIBLE_v1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Text;
        ///
        ///// http://www.spoj.com/problems/HORRIBLE/ #bit #divide-and-conquer #research
        ///// Answers range sum queries and performs range additions.
        ///public sealed class HORRIBLE // v2, using a RURQ BIT
        ///{
        ///    private readonly RURQBinaryIndexedTree _binaryIndexedTree;
        ///
        ///    public HORRIBLE(int arrayLength)
        ///    {
        ///        _binaryIndexedTree = new RURQBinaryIndexedTree(arrayLength);
        ///    }
        ///
        ///    public void Update(int updateStartIndex, int updateEndIndex, int delta)
        ///        =&gt; _b [rest of string was truncated]&quot;;.
        /// </summary>
        public static string HORRIBLE_v2 {
            get {
                return ResourceManager.GetString("HORRIBLE_v2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/HOTELS/ #greedy #optimization #subarray #window
        ///// Finds the consecutive hotels that maximize the money spent (without going over).
        ///public static class HOTELS
        ///{
        ///    // Gonna have a start hotel and an end hotel. The end hotel for a given start
        ///    // hotel is the one immediately before the hotel that would put us over the spend limit.
        ///    // Once we find that, we move the start hotel to the next hotel, and try pushing the
        ///    // end hotel again. Wheneve [rest of string was truncated]&quot;;.
        /// </summary>
        public static string HOTELS {
            get {
                return ResourceManager.GetString("HOTELS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections;
        ///
        ///// http://www.spoj.com/problems/HPYNOS/ #digits #simulation
        ///// Determines if repeatedly adding the squared digits of a number eventually gets to 1.
        ///public static class HPYNOS
        ///{
        ///    // n is limited to 2,147,483,647, so by inspection 1,999,999,999 will give us the
        ///    // limit of the numbers we can get after at least one breaking. That is:
        ///    // 1^2 + 9 * 9^2 = 730. So we&apos;ll have a size 731 bool array to keep track of what&apos;s already seen.
        ///    public static i [rest of string was truncated]&quot;;.
        /// </summary>
        public static string HPYNOS {
            get {
                return ResourceManager.GetString("HPYNOS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/HUBULLU/ #game #proof #trap
        ///// Determines who wins in a game where a number and all its divisors are removed each turn.
        ///public static class HUBULLU
        ///{
        ///    // Assume by contradication player two can win. Blah blah the players are playing
        ///    // optimally and the problem guarantees determining a winner is possible, or whatever,
        ///    // I don&apos;t know anything about game theory which is what made this problem tricky
        ///    // (spent a couple hours before coming  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string HUBULLU {
            get {
                return ResourceManager.GetString("HUBULLU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/INVCNT/ #ad-hoc #binary-search-tree
        ///// Finds the number of inversions (larger index, but smaller value) in an array.
        ///public static class INVCNT
        ///{
        ///    // The array size is limited to 200k elements, but that could be
        ///    // 200k * (200k - 1) / 2 inversions, so we need to use long when counting.
        ///    public static long Solve(int[] array)
        ///    {
        ///        var inversionBST = new InversionBST(array[0]);
        ///
        ///        long inversionCount = 0;
        ///        for (int i =  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string INVCNT {
            get {
                return ResourceManager.GetString("INVCNT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Linq;
        ///using System.Text;
        ///
        ///// http://www.spoj.com/problems/JAVAC/ #ad-hoc #strings
        ///// Turns Java-like identifiers into C++-like identifiers, and vice versa.
        ///public static class JAVAC
        ///{
        ///    public static string Solve(string identifier)
        ///    {
        ///        bool isJavaIdentifier = char.IsLower(identifier[0])
        ///            &amp;&amp; identifier.All(c =&gt; char.IsLetter(c));
        ///
        ///        // Just doing !isJavaIdentifier to save work here; technically the identifier could be both.
        ///        bool is [rest of string was truncated]&quot;;.
        /// </summary>
        public static string JAVAC {
            get {
                return ResourceManager.GetString("JAVAC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///
        ///// http://www.spoj.com/problems/JULKA/ #big-numbers #math
        ///// Given the apples two girls have together and how many one has over the other,
        ///// returns how many apples each girl has individually.
        ///public static class JULKA
        ///{
        ///    public static Tuple&lt;BigInteger, BigInteger&gt; Solve(
        ///        BigInteger totalApples, BigInteger extraKlaudiaApples)
        ///    {
        ///        // totalApples = nataliaApples + klaudiaApples
        ///        // klaudiaApples = nat [rest of string was truncated]&quot;;.
        /// </summary>
        public static string JULKA {
            get {
                return ResourceManager.GetString("JULKA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///
        ///// http://www.spoj.com/problems/LASTDIG/ #digits #mod-math
        ///// For a base b from 0 through 20 and an exponent e, compute b^e mod 10 (the last digit of b^e).
        ///public static class LASTDIG
        ///{
        ///    public static int Solve(int b, int e)
        ///        =&gt; Mod10Exponentiator.Compute(b, e);
        ///}
        ///
        ///public static class Mod10Exponentiator
        ///{
        ///    // Last digit patterns for repeated exponentiations of bases 0 through 9.
        ///    // A repeating last digit establishes the pattern, [rest of string was truncated]&quot;;.
        /// </summary>
        public static string LASTDIG {
            get {
                return ResourceManager.GetString("LASTDIG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///using System.Numerics;
        ///
        ///// http://www.spoj.com/problems/LASTDIG2/ #digits #mod-math
        ///// For big integer b and long e, compute b^e mod 10 (the last digit of b^e).
        ///public static class LASTDIG2
        ///{
        ///    public static int Solve(BigInteger b, long e)
        ///        =&gt; Mod10Exponentiator.Compute(b, e);
        ///}
        ///
        ///public static class Mod10Exponentiator
        ///{
        ///    // Last digit patterns for repeated exponentiations of bases 0 through 9.
        ///    // A repeating last digit establishe [rest of string was truncated]&quot;;.
        /// </summary>
        public static string LASTDIG2 {
            get {
                return ResourceManager.GetString("LASTDIG2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///using System.Text;
        ///
        ///// http://www.spoj.com/problems/MAJOR/ #ad-hoc #extrema
        ///// Determines if any number makes up the majority of all the numbers sent.
        ///public static class MAJOR // v1, using a dictionary and no more than one full pass.
        ///{
        ///    // TLE is strict here, don&apos;t even have time to parse the transmissions into ints.
        ///    // Don&apos;t have time to sort and traverse the array either, but dictionary of counts
        ///    // might work. And we can optimize that  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string MAJOR_v1 {
            get {
                return ResourceManager.GetString("MAJOR_v1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Text;
        ///
        ///// http://www.spoj.com/problems/MAJOR/ #ad-hoc #extrema
        ///// Determines if any number makes up the majority of all the numbers sent.
        ///public static class MAJOR // v2, using the Boyer-Moore algorithm and two passes.
        ///{
        ///    // https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm
        ///    public static string Solve(string[] transmissions)
        ///    {
        ///        // Attempt to get the majority transmission.
        ///        string winningTransmission = null;
        ///        for (i [rest of string was truncated]&quot;;.
        /// </summary>
        public static string MAJOR_v2 {
            get {
                return ResourceManager.GetString("MAJOR_v2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Numerics;
        ///
        ///// http://www.spoj.com/problems/MARBLES/ #big-numbers #combinatorics #math #research
        ///// From k differently colored, infinite sets of marbles, counts the number of ways to choose n marbles s.t.
        ///// there&apos;s always at least one marble of each color chosen.
        ///public static class MARBLES
        ///{
        ///    // Knowing how to solve the problem without the requirement of a marble for each color is useful
        ///    // (and it&apos;s a common problem). Effectively we need to distribute the marbles [rest of string was truncated]&quot;;.
        /// </summary>
        public static string MARBLES {
            get {
                return ResourceManager.GetString("MARBLES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/MAXLN/ #math #proof
        ///// Finds the max value of a formula given in terms of the side lengths of an inscribed triangle.
        ///public static class MAXLN
        ///{
        ///    // Note by drawing a line from the center to the off-diameter corner we can create two isoceles
        ///    // triangles, one with angle x and one with angle y. Then x + (x + y) + y = 180 =&gt; x + y = 90 (angle A)
        ///    // =&gt; the inscribed triangle is always a right triangle. Then AB^2 + AC^2 = (2r)^2 =&gt; AB^2 = 4r^2 -  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string MAXLN {
            get {
                return ResourceManager.GetString("MAXLN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Linq;
        ///using System.Text;
        ///
        ///// http://www.spoj.com/problems/MCOINS/ #game #research
        ///// Plays a finite, perfect information 2-player game where coins are removed from a stack.
        ///public static class MCOINS
        ///{
        ///    // This ties back to HUBULLU and NGM and the idea of a determinate game, for background see:
        ///    // https://en.wikipedia.org/wiki/Zermelo%27s_theorem_(game_theory)
        ///    // http://www.math.harvard.edu/~elkies/FS23j.03/zermelo.pdf
        ///    // I think about it like, if the fir [rest of string was truncated]&quot;;.
        /// </summary>
        public static string MCOINS {
            get {
                return ResourceManager.GetString("MCOINS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/MISERMAN/ #dynamic-programming-2d #path-optimization #trap
        ///// Finds the cheapest way to take buses between two cities, with constrained movement.
        ///public static class MISERMAN
        ///{
        ///    // Basically the same as BYTESM2. Cheapest way to get to the final city is fare of final bus we use
        ///    // to get there, plus cheapest way to get to that final bus, knowing we can arrive at it by taking
        ///    // any one of the adjacent buses in the previous city (so recursively [rest of string was truncated]&quot;;.
        /// </summary>
        public static string MISERMAN {
            get {
                return ResourceManager.GetString("MISERMAN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/MIXTURES/ #dynamic-programming-2d #memoization #optimization
        ///// Helps Harry mix potions in the way that produces the least amount of smoke.
        ///public static class MIXTURES
        ///{
        ///    // Observation: the order the mixtures are mixed won&apos;t matter in the end. Adding up a bunch of numbers
        ///    // mod 100 doesn&apos;t depend on the order it&apos;s done (associativity), so the color of the final mixture will be
        ///    // the same regardless (which makes sense, the colors are addin [rest of string was truncated]&quot;;.
        /// </summary>
        public static string MIXTURES {
            get {
                return ResourceManager.GetString("MIXTURES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/NGM/ #game
        ///// For a game between two players where digits are subtracted from a number
        ///// in turn, finds who wins the game and what player one&apos;s first move should be if he can win.
        ///public static class NGM
        ///{
        ///    // If the number doesn&apos;t end in zero then the first player guarantees
        ///    // victory by subtracting the final digit to make a number that does end in zero.
        ///    // Then the second player has to subtract less than 10 from that number, so the
        ///     [rest of string was truncated]&quot;;.
        /// </summary>
        public static string NGM {
            get {
                return ResourceManager.GetString("NGM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///using System.Text;
        ///
        ///// http://www.spoj.com/problems/NHAY/ #research #strings
        ///// Finds all occurrences of a given pattern in a string.
        ///public static class NHAY
        ///{
        ///    public static IEnumerable&lt;int&gt; Solve(string text, string pattern)
        ///        =&gt; KmpStringMatcher.GetMatchIndices(text, pattern);
        ///}
        ///
        ///// This is taken from CLRS. It maintains the one-based indexing used in it (since it&apos;s most natural), but gets a
        ///// little ugly as the strings have to be zer [rest of string was truncated]&quot;;.
        /// </summary>
        public static string NHAY {
            get {
                return ResourceManager.GetString("NHAY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/NSTEPS/ #ad-hoc
        ///// Given an x and y coordinate, returns the value on the plane at that point.
        ///public static class NSTEPS
        ///{
        ///    public static string Solve(int x, int y)
        ///    {
        ///        if (x == y || x == y + 2)
        ///        {
        ///            if (x % 2 == 0)
        ///                return (x + y).ToString();
        ///            else
        ///                return (x + y - 1).ToString();
        ///        }
        ///
        ///        return &quot;No Number&quot;;
        ///    }
        ///}
        ///
        ///public static class Program
        ///{
        ///    private  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string NSTEPS {
            get {
                return ResourceManager.GetString("NSTEPS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///
        ///// http://www.spoj.com/problems/NY10A/ #buckets #sorting #strings
        ///// Counts the 8 different length 3 H/T substrings in a string of coin flips.
        ///public static class NY10A
        ///{
        ///    public static IEnumerable&lt;int&gt; Solve(string flips)
        ///    {
        ///        // The sequence counts happen to be wanted in reverse alphabetical order,
        ///        // so it&apos;s useful to have a sorted dictionary here, but we won&apos;t bother with a comparer.
        ///        var threeFlip [rest of string was truncated]&quot;;.
        /// </summary>
        public static string NY10A {
            get {
                return ResourceManager.GetString("NY10A", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Linq;
        ///
        ///// http://www.spoj.com/problems/OFFSIDE/ #ad-hoc #extrema #research
        ///// Determines if an attacker is offsides (using player positions only).
        ///public static class OFFSIDE
        ///{
        ///    public static bool Solve(int[] attackers, int[] defenders)
        ///    {
        ///        // There may be attackers further than the closest attacker who are also offsides,
        ///        // but that doesn&apos;t matter here. If anyone&apos;s offsides, the closest attacker is too.
        ///        int closestAttacker = attackers.Min() [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OFFSIDE {
            get {
                return ResourceManager.GetString("OFFSIDE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/OLOLO/ #binary #io #trap
        ///// Identifies the sole integer that occurs in the input once rather than twice.
        ///// See OLOLO.cpp--this solution was submitted using C++ because C# I/O is too slow.
        ///public static class OLOLO
        ///{
        ///    public static int Solve(int pyaniCount)
        ///    {
        ///        int remainingPyanis = pyaniCount;
        ///        int result = 0;
        ///
        ///        while (remainingPyanis-- &gt; 0)
        ///        {
        ///            // It&apos;s easy to see XOR&apos;ing will work if all integer pair [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OLOLO {
            get {
                return ResourceManager.GetString("OLOLO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/ONP/ #parsing #recursion #stack #strings
        ///// Returns the RPN form of the expression with binary operators and parentheses.
        ///public static class ONP
        ///{
        ///    public static string Solve(string expression)
        ///    {
        ///        // expression is some constant.
        ///        if (expression.Length == 1)
        ///            return expression;
        ///
        ///        // expression is of the form (firstSubexpression@secondSubexpression), where @ represents an arbitrary operator.
        ///        // Now RPN( [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ONP {
            get {
                return ResourceManager.GetString("ONP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Linq;
        ///
        ///// http://www.spoj.com/problems/PALIN/ #ad-hoc #experiment #inspection
        ///// Outputs the smallest palindrome larger than the given integer (as strings, since they can be very large).
        ///public static class PALIN
        ///{
        ///    public static string Solve(string k)
        ///    {
        ///        // Need to handle even-length and odd-length arrays a bit differently, since odds have a middle index.
        ///        int? middleIndex = k.Length % 2 == 0 ? (int?)null : k.Length / 2;
        ///        int leftHalfStartIn [rest of string was truncated]&quot;;.
        /// </summary>
        public static string PALIN {
            get {
                return ResourceManager.GetString("PALIN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/PARTY/ #dynamic-programming-2d #knapsack #optimization
        ///// Chooses parties to maximize fun for the given party budget (0/1 knapsack).
        ///public static class PARTY
        ///{
        ///    // If you don&apos;t know 0/1 knapsack and need a hint, knowing the DP is two-dimensional
        ///    // on the parties being considered and the amount of budget used should be enough.
        ///    // (If we&apos;re using i parties for some budget, the maximum fun value is the max of the value for i - 1
        ///    // partie [rest of string was truncated]&quot;;.
        /// </summary>
        public static string PARTY {
            get {
                return ResourceManager.GetString("PARTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/PERMUT2/ #ad-hoc #permutations
        ///// Figures out if a permutation of n integers is the same as its inverse permutation (AKA ambiguous).
        ///public static class PERMUT2
        ///{
        ///    public static bool Solve(int[] permutation)
        ///    {
        ///        // Given is a permutation like 5, 1, 2, 3, 4.
        ///        // This (obviously) tells us the value 5 is at index 1, the value 1 is at index 2, and so on.
        ///        // We can also interpret the permutation as specifying an inverse permutat [rest of string was truncated]&quot;;.
        /// </summary>
        public static string PERMUT2 {
            get {
                return ResourceManager.GetString("PERMUT2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///
        ///// http://www.spoj.com/problems/PHONELST/ #research #strings #trie
        ///// Determines if some phone numbers are consistent--none the prefix of another.
        ///public static class PHONELST
        ///{
        ///    // This uses a modified trie, where the trie&apos;s Add method returns a bool indicating
        ///    // whether the string added was a prefix of a string already present, or prefixed
        ///    // by a string already present. In either case, the phone numbers aren&apos;t consistent,
        ///    // so we [rest of string was truncated]&quot;;.
        /// </summary>
        public static string PHONELST {
            get {
                return ResourceManager.GetString("PHONELST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/PIGBANK/ #dynamic-programming-1d #knapsack #optimization
        ///// Finds the minimum  amount of money that could be inside a piggy bank of a certain weight.
        ///public static class PIGBANK // v1, 1D as an unbounded knapsack problem.
        ///{
        ///    private static int?[] _minimumMoneyAmounts = new int?[10001];
        ///
        ///    static PIGBANK()
        ///    {
        ///        // No matter our available coin types, a weight of zero is attainable by (and only by)
        ///        // leaving the piggy bank empty,  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string PIGBANK_v1 {
            get {
                return ResourceManager.GetString("PIGBANK_v1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/PIGBANK/ #dynamic-programming-2d #knapsack #optimization
        ///// Finds the minimum  amount of money that could be inside a piggy bank of a certain weight.
        ///public static class PIGBANK // v2, 2D structured similarly as 0/1 knapsack.
        ///{
        ///    private static int?[,] _minimumMoneyAmounts = new int?[501, 10001];
        ///
        ///    static PIGBANK()
        ///    {
        ///        // No matter our available coin types, a weight of zero is attainable by (and only by)
        ///        // leaving the piggy ba [rest of string was truncated]&quot;;.
        /// </summary>
        public static string PIGBANK_v2 {
            get {
                return ResourceManager.GetString("PIGBANK_v2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Text;
        ///
        ///// http://www.spoj.com/problems/PIR/ #formula #math #research
        ///// Calculates the volume of a triangular pyramid, given its side lengths.
        ///public static class PIR
        ///{
        ///    // See https://en.wikipedia.org/wiki/Tetrahedron#Heron-type_formula_for_the_volume_of_a_tetrahedron.
        ///    // References a paper talking about a lot of numerical analysis issues, but for
        ///    // us the main problem will be making sure we line up the input to match the
        ///    // side lengths needed by the fo [rest of string was truncated]&quot;;.
        /// </summary>
        public static string PIR {
            get {
                return ResourceManager.GetString("PIR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///using System.Diagnostics;
        ///using System.Linq;
        ///using System.Text;
        ///
        ///// http://www.spoj.com/problems/PPATH/ #graph-theory #primes #sieve
        ///// Finds the shortest path to travel between primes, along primes, in one-digit swaps.
        ///public static class PPATH
        ///{
        ///    private static SimpleGraph _primeGraph;
        ///
        ///    static PPATH()
        ///    {
        ///        // 10000 because zero-based indices. This isn&apos;t great as we don&apos;t need 10000
        ///        // (as most #s don&apos;t represent primes) [rest of string was truncated]&quot;;.
        /// </summary>
        public static string PPATH {
            get {
                return ResourceManager.GetString("PPATH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///using System.Text;
        ///
        ///// http://www.spoj.com/problems/PRIME1/ #primes #sieve
        ///// Returns all the primes between two numbers m and n (inclusive), where 1 &lt;= m &lt;= n &lt;= 1,000,000,000.
        ///public static class PRIME1
        ///{
        ///    private const int _limit = 1000000000;
        ///    private static readonly TrialDivisionDecider _decider;
        ///
        ///    static PRIME1()
        ///    {
        ///        _decider = new TrialDivisionDecider(_limit);
        ///    }
        ///
        ///    // This is still pretty slow, looks like we migh [rest of string was truncated]&quot;;.
        /// </summary>
        public static string PRIME1 {
            get {
                return ResourceManager.GetString("PRIME1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///
        ///// http://www.spoj.com/problems/PT07Y/ #graph-theory #tree
        ///// Determines if the given graph is a tree.
        ///public static class PT07Y
        ///{
        ///    // Skipping the details, a graph is a tree if it&apos;s connected and has (vertexCount - 1) edges.
        ///    public static bool Solve(int vertexCount, int edgeCount, int[,] edges)
        ///    {
        ///        if (edgeCount != vertexCount - 1)
        ///            return false;
        ///
        ///        return SimpleGraph
        ///            .CreateFrom [rest of string was truncated]&quot;;.
        /// </summary>
        public static string PT07Y {
            get {
                return ResourceManager.GetString("PT07Y", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///
        ///// http://www.spoj.com/problems/PT07Z/ #bfs #graph-theory #proof #tree
        ///// Finds the longest path in a tree.
        ///public static class PT07Z
        ///{
        ///    // See image for details: http://i.imgur.com/hWnw1N9.jpg.
        ///    public static int Solve(int nodeCount, int[,] edges)
        ///    {
        ///        if (nodeCount == 1)
        ///            return 0;
        ///
        ///        SimpleGraph graph = SimpleGraph.CreateFromOneBasedEdges(nodeCount, edges);
        ///
        ///        var firstVertex = graph. [rest of string was truncated]&quot;;.
        /// </summary>
        public static string PT07Z {
            get {
                return ResourceManager.GetString("PT07Z", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Text;
        ///
        ///// http://www.spoj.com/problems/QUADAREA/ #formula #research
        ///// Compute the max area possible for any quadrilateral with the given side lengths.
        ///public static class QUADAREA
        ///{
        ///    // Some facts on the Wikipedia page for cyclic quadrilateral mention they have the
        ///    // most area of any quadrilateral with the same sequence of side lengths. Not sure
        ///    // but I guess no matter the side lengths, we can assume a cyclic quadrilteral with
        ///    // those side lengths exis [rest of string was truncated]&quot;;.
        /// </summary>
        public static string QUADAREA {
            get {
                return ResourceManager.GetString("QUADAREA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///
        ///// http://www.spoj.com/problems/SAMER08F/ #ad-hoc #dynamic-programming-1d #experiment #math
        ///// Returns the number of squares in a grid of n x n squares, for 1 &lt;= n &lt;= 100.
        ///// See SAMER08F.cpp--this solution was submitted using C++ because C# was unavailable.
        ///public static class SAMER08F
        ///{
        ///    private const int _limit = 100;
        ///    private static readonly IReadOnlyList&lt;int&gt; _squareCounts;
        ///
        ///    static SAMER08F()
        ///    {
        ///        int[] squareCounts = new  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string SAMER08F {
            get {
                return ResourceManager.GetString("SAMER08F", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///using System.Text;
        ///
        ///// http://www.spoj.com/problems/SBANK/ #hash-table #radix-sort #research #sorting #trap
        ///// Sorts bank accounts ascendingly (lexicographically, but all the same length so w/e).
        ///public static class SBANK
        ///{
        ///    // TLE is an issue so I do the I/O inside of the Solve this time. At first I tried a
        ///    // SortedDictionary and that was too slow. Then I tried a SortedList, too slow, then
        ///    // just sorting an array of strings and iteratin [rest of string was truncated]&quot;;.
        /// </summary>
        public static string SBANK {
            get {
                return ResourceManager.GetString("SBANK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/SILVER/ #ad-hoc #binary #combinatorics #proof
        ///// Finds the way to pay someone a silver a day with the fewest cuts.
        ///public static class SILVER
        ///{
        ///    // First, note there could be a lot going on here (cuts on what&apos;s been cut) so DP or recursion
        ///    // is probably out and there&apos;s a better solution. Then try a few examples  by hand, progressing
        ///    // naturally/greedily, following certain guidelines that make sense like: only cut when needed,
        ///    // always [rest of string was truncated]&quot;;.
        /// </summary>
        public static string SILVER {
            get {
                return ResourceManager.GetString("SILVER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/STAMPS/ #extrema #sorting
        ///// Figures out if Lucy can borrow enough stamps from a certain number of her friends.
        ///public static class STAMPS
        ///{
        ///    public static string Solve(int neededStamps, int[] friendsStampCounts)
        ///    {
        ///        // This sorts in ascending order and there&apos;s not a great way to get descending, so we&apos;ll traverse backwards.
        ///        Array.Sort(friendsStampCounts);
        ///
        ///        int borrowedStamps = 0;
        ///        // Borrow stamps from the remaini [rest of string was truncated]&quot;;.
        /// </summary>
        public static string STAMPS {
            get {
                return ResourceManager.GetString("STAMPS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///
        ///// http://www.spoj.com/problems/STPAR/ #ad-hoc #greedy #stack
        ///// Given the order of some love mobiles on an approach street, figures out if it&apos;s possible to
        ///// put them in their final parade order using a side street (as a stack).
        ///public static class STPAR
        ///{
        ///    // The array here might be something like 5 1 2 4 3, meaning the love mobile that&apos;s
        ///    // 1st on the approach street needs to be 5th on the parade street, the love mobile
        ///    // that&apos;s 2nd  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string STPAR {
            get {
                return ResourceManager.GetString("STPAR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Actual submission, 312 bytes:
        ///// using System;class P{static int I()=&gt;int.Parse(Console.ReadLine());static void Main(){int t=I(),s,m,i,j;while(t--&gt;0){s=I()+1;var v=new int[s,s];m=0;for(i=1;i&lt;s;++i){var l=Console.ReadLine().Split();for(j=1;j&lt;=i;++j)m=Math.Max(m,v[i,j]=int.Parse(l[j-1])+Math.Max(v[i-1,j],v[i-1,j-1]));}Console.WriteLine(m);}}}
        ///
        ///using System;
        ///
        ///// http://www.spoj.com/problems/SUMITR/ #dynamic-programming-2d #golf #path-optimization
        ///// Finds greatest path sum in a triangular grid, while  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string SUMITR {
            get {
                return ResourceManager.GetString("SUMITR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #ad-hoc
        ///#bfs
        ///#bfs-multi-source
        ///#big-numbers
        ///#binary
        ///#binary-search
        ///#binary-search-tree
        ///#bit
        ///#buckets
        ///#combinatorics
        ///#deque
        ///#dfs
        ///#digits
        ///#divide-and-conquer
        ///#division
        ///#dynamic-programming
        ///#dynamic-programming-1d
        ///#dynamic-programming-2d
        ///#dynamic-programming-x
        ///#experiment
        ///#extrema
        ///#factorial
        ///#factors
        ///#formula
        ///#game
        ///#gcd
        ///#golf
        ///#graph-theory
        ///#greedy
        ///#hash-table
        ///#heap
        ///#inspection
        ///#intersection
        ///#intuition
        ///#io
        ///#knapsack
        ///#lazy
        ///#math
        ///#memoization
        ///#merge
        ///#mod-math
        ///#mst
        ///#networ [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Tags {
            get {
                return ResourceManager.GetString("Tags", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///using System.Text;
        ///
        ///// http://www.spoj.com/problems/TDPRIMES/ #primes #sieve
        ///// Prints some of the primes up to 100 million.
        ///public static class TDPRIMES
        ///{
        ///    private const int _100Million = 100000000;
        ///
        ///    public static string Solve()
        ///    {
        ///        var decider = new SieveOfEratosthenesDecider(_100Million);
        ///
        ///        var output = new StringBuilder();
        ///        output.Append(2);
        ///        output.AppendLine();
        ///
        ///        int count = 1;
        ///        for ( [rest of string was truncated]&quot;;.
        /// </summary>
        public static string TDPRIMES {
            get {
                return ResourceManager.GetString("TDPRIMES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/TEST/ #io
        ///// Reads and prints console input until the answer to life, the universe, and everything is found.
        ///public static class TEST
        ///{
        ///    private const string _answerToEverything = &quot;42&quot;;
        ///
        ///    public static void Solve()
        ///    {
        ///        string line;
        ///        while ((line = Console.ReadLine()) != _answerToEverything)
        ///        {
        ///            Console.WriteLine(line);
        ///        }
        ///    }
        ///}
        ///
        ///public static class Program
        ///{
        ///    private static void Main()
        ///   [rest of string was truncated]&quot;;.
        /// </summary>
        public static string TEST {
            get {
                return ResourceManager.GetString("TEST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Text;
        ///
        ///// http://www.spoj.com/problems/TOANDFRO/ #ad-hoc #strings
        ///// Given an encoded message and the number of columns used to encode the message,
        ///// transform the message to the array used for the encoding, and then to the original (padded) message.
        ///public static class TOANDFRO
        ///{
        ///    public static string Solve(int columnCount, string encodedMessage)
        ///    {
        ///        int rowCount = encodedMessage.Length / columnCount;
        ///        char[,] messageArray = new char[rowCount, colu [rest of string was truncated]&quot;;.
        /// </summary>
        public static string TOANDFRO {
            get {
                return ResourceManager.GetString("TOANDFRO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///
        ///// http://www.spoj.com/problems/TRICOUNT/ #inspection #math #proof
        ///// Counts triangles (of all sizes) for different levels of the given construction.
        ///public static class TRICOUNT
        ///{
        ///    private const int _maxLevel = 1000000;
        ///    private static readonly IReadOnlyList&lt;long&gt; _triangleCounts;
        ///
        ///    // See image for details: http://i.imgur.com/Sa2yh7R.jpg.
        ///    static TRICOUNT()
        ///    {
        ///        long[] triangleCounts = new long[_maxLevel + 1];
        ///        tria [rest of string was truncated]&quot;;.
        /// </summary>
        public static string TRICOUNT {
            get {
                return ResourceManager.GetString("TRICOUNT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///
        ///// http://www.spoj.com/problems/TRT/ #experiment #memoization #optimization #recursion
        ///// Finds the optimal order to sell cow treats that become more valuable over time.
        ///public static class TRT // v1, top-down, recursion with memoization
        ///{
        ///    // Observation: for a given range, the starting age is always the same. That&apos;s because the starting age
        ///    // corresponds to the number of treats chosen before arriving at the range, and to arrive at a range
        ///  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string TRT_v1 {
            get {
                return ResourceManager.GetString("TRT_v1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/TRT/ #dynamic-programming-2d #experiment #optimization
        ///// Finds the optimal order to sell cow treats that become more valuable over time.
        ///public static class TRT // v2, bottom-up, dynamic programming with tabulation
        ///{
        ///    // See TRT_v1 for the memoized solution that helps motivate this DP.
        ///    // A 2D array is used for the DP, where the first index corresponds to a range&apos;s start index
        ///    // and the second index corresponds to that range&apos;s end index. Th [rest of string was truncated]&quot;;.
        /// </summary>
        public static string TRT_v2 {
            get {
                return ResourceManager.GetString("TRT_v2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///
        ///// http://www.spoj.com/problems/TWOSQRS/ #math #mod-math #primes #research #sieve
        ///// Determines if an integer can be expressed as the sum of two squared integers.
        ///public static class TWOSQRS
        ///{
        ///    private const long _oneTrillion = 1000000000000;
        ///    private static readonly TrialDivisionFactorizer _factorizer;
        ///
        ///    static TWOSQRS()
        ///    {
        ///        _factorizer = new TrialDivisionFactorizer(_oneTrillion);
        ///    }
        ///
        ///    // See https: [rest of string was truncated]&quot;;.
        /// </summary>
        public static string TWOSQRS {
            get {
                return ResourceManager.GetString("TWOSQRS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///
        ///// http://www.spoj.com/problems/WILLITST/ #experiment #game #math
        ///// Determines if the specified algorithm ever stops for a given input.
        ///public static class WILLITST
        ///{
        ///    // If the second branch gets hit, the number maps to 3(n + 1) and definitely has a factor of 3.
        ///    // That means that second branch eventually gets hit again, even if a lot of factors of 2 get divided out.
        ///    // And when it&apos;s hit again, it still has a factor of 3 after mapping to 3(n + 1), and the process repeats. [rest of string was truncated]&quot;;.
        /// </summary>
        public static string WILLITST {
            get {
                return ResourceManager.GetString("WILLITST", resourceCulture);
            }
        }
    }
}
